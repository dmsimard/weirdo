---
#   Copyright Red Hat, Inc. All Rights Reserved.
#
#   Licensed under the Apache License, Version 2.0 (the "License"); you may
#   not use this file except in compliance with the License. You may obtain
#   a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#   WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#   License for the specific language governing permissions and limitations
#   under the License.
#

- name: Run global debug commands and capture output
  shell: "{{ item.value.command }} >{{ log_destination }}/{{ item.key }}.txt"
  args:
    creates: "{{ log_destination }}/{{ item.key }}.txt"
  with_dict: debug_commands
  ignore_errors: True

- name: Copy existing logs to central folder
  command: "rsync -azr {{ item }} {{ log_destination }}/"
  args:
    creates: "{{ log_destination }}/{{ item }}"
  with_items: log_paths
  ignore_errors: True

- name: Output hostvars to file
  copy:
    content: "{{ hostvars[inventory_hostname] | to_nice_json }}"
    dest: "{{ log_destination }}/ansible_hostvars.txt"
  ignore_errors: True

- name: Convert files to .txt (web mime type)
  shell: |
    for file in $(find {{ log_destination }} -name "*.{{ item }}"); do
      mv $file ${file/.{{ item }}/.txt}
    done
  with_items:
    - log
    - conf
    - fact
  ignore_errors: True

- name: Compress all files
  shell: |
    find {{ log_destination }} -type f -name "*.txt" -execdir gzip -9 {} \+
  ignore_errors: True

# Ansible_python_interpreter set here explicitely to work around behavior
# described in https://github.com/ansible/ansible/issues/13773
- name: Generate HTML redirection to build artifacts
  vars:
    ansible_python_interpreter: "/usr/bin/python"
  template:
    src: "logs.html.j2"
    dest: "{{ lookup('env', 'WORKSPACE')}}/logs.html"
  ignore_errors: True
  delegate_to: localhost

- name: Fetch and gzip the console log
  shell: |
    URL="{{ lookup('env', 'BUILD_URL') }}/consoleText";
    curl $URL | gzip > {{ log_destination }}/console.txt.gz
  args:
    creates: "{{ log_destination }}/console.txt.gz"
  ignore_errors: True

- name: Upload logs to the artifact server
  environment:
    RSYNC_PASSWORD: "{{ rsync_password }}"
  shell: |
    rsync -avzR {{ log_root }}/./{{ job_name }}/{{ build_number }} \
    {{ rsync_server }} --stats
  ignore_errors: True
